import requests
from datetime import datetime
import csv
import argparse
from pathlib import Path


def check_host(ip_address: str,
               secure: bool = False) -> str:

    scheme = "https" if secure else "http"
    url = f"{scheme}://{ip_address}/webui/logoutconfirm.html?logon_hash=1"
    
    try:
        response = requests.post(url, timeout=5)
    except requests.exceptions.Timeout:
        return f"{ip_address}, host clean"
    except Exception as e:
        return f"{ip_address}, Error: {str(e)}"
    
    if '1a80b7389ccd0a5dab' in response.text:
        return f"{ip_address}, Compromised by CVE-2023-20198"
    else:
        return f"{ip_address}, host clean"


def write_to_csv(output_data: list,
                 result_file_name: str = 'scan_results.csv',
                 overwrite_output_file: bool = False) -> None:

    if overwrite_output_file:
        file_method = 'w'
    else:
        file_method = 'a'

    # Find out if the result file already exists
    new_result_file = Path(result_file_name).exists()

    with open(result_file_name, file_method, newline='') as csvfile:
        fieldnames = ['IP Address', 'Status', 'Timestamp']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

        # If it is a new file, write the header
        if new_result_file:
            writer.writeheader()

        for line in output_data:
            ip, status = line.split(', ')
            writer.writerow(
                {'IP Address': ip, 'Status': status, 'Timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
            )


def read_file(file: str) -> list:
    lines = []
    with open(file) as f:
        lines.append(f.readline())

    return lines


def scan_and_report(ip_list: list,
                    secure: bool = False,
                    result_file_name: str = 'scan_results.csv',
                    overwrite_output_file: bool = False) -> None:

    results = []
    for ip in ip_list:
        result = check_host(ip, secure)
        print(result)
        results.append(result)

    write_to_csv(results,
                 result_file_name=result_file_name,
                 overwrite_output_file=overwrite_output_file)

    print(f"Results saved to: {result_file_name}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Implant Detection for Cisco vulnerability (CVE-2023-20198)')
    parser.add_argument('-i', '--input_file',
                        required=False,
                        help='Filename for input list of IPs')

    parser.add_argument('--secure',
                        action='store_true',
                        default=False,
                        help='Set this to enable HTTPS connections')

    parser.add_argument('--result_file',
                        default='scan_results.csv',
                        help='The name of the output_data file')

    parser.add_argument('--overwrite',
                        dest='overwrite_output_file',
                        action='store_true',
                        default=False,
                        help='Write behaviour of the output file. Append or overwrite.  Append is default.')

    args = parser.parse_args()
    if not args.input_file:
        ip_addresses = input("Enter comma-separated IP addresses: ").split(',')
        ip_addresses = [ip.strip() for ip in ip_addresses]  # Remove any extra spaces
    else:
        ip_addresses = read_file(args.input_file)

    # execute the main scan and report function
    scan_and_report(ip_addresses,
                    secure=args.secure,
                    result_file_name=args.result_file,
                    overwrite_output_file=args.overwrite_output_file)
